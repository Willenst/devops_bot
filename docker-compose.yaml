version: '3.8'
x-postgres-common:
  &postgres-common
  image: postgres:latest
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U ${DB_USER} --dbname=${DB_DATABASE}'
    interval: 10s
    timeout: 5s
    retries: 5


services:
  bot_image:
    build: 
      context: ./bot_image
    depends_on:
      - db
    volumes:
      - .env:/app/.env
    networks:
      bot_net:
        ipv4_address: 172.16.238.2

  db_image:
    <<: *postgres-common
    build: 
      context: ./db_image
      args:
        - DB_REPL_USER=${DB_REPL_USER}
        - DB_REPL_PASSWORD=${DB_REPL_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    networks:
      bot_net:
        ipv4_address: ${DB_HOST}

  db_repl_image:
    <<: *postgres-common
    build:
      context: ./db_repl_image
    ports:
      - "${DB_REPL_PORT}:${DB_PORT}"
    networks:
      bot_net:
        ipv4_address: ${DB_REPL_HOST}
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=${DB_HOST} --port=${DB_PORT}
      do
      #echo 'Waiting for primary to connect...'
      sleep 1s
      done
      #echo 'Backup done, starting replica...'
      chown -R postgres:postgres /var/lib/postgresql/data
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - db
    logging:
      driver: "json-file"


networks:
  bot_net:
    ipam:
      config:
        - subnet: 172.16.238.0/24

